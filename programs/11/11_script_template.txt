In this video, I am really excited to be introducing one of the most important concepts in Java programming.....OBJECTS
Not all programming lanaguages use objects, as there are two main types of programming language categories:
Procedural programming lanaguages
Object Oriented programming lanaguages

To keep it simple, 
Object Oriented programming is when you use objects
Procedural programming is when you do NOT use objects.

With Java, you can do both because in all the previous videos so far, we did NOT use objects. So with Java, you do NOT need to use objects.

However, Java was designed from its beginning (which was in the 1990s) to use objects.

Objects are fun!
Objects are cool!
Objects are the best!
You should always try to use objects because they usually make your program easiler to understand.

So what is an object?

An object is a Person, Place, Thing, or an Idea.  If this was an english class, I would define an object as a NOUN.

Let's look at an example:

The object I am going to create for this example is a:  Bank Account

First, to define an object, create a new class.  Right click on the package, New -> Class

For the name, enter the name of your Object.  (Bank Account) - Start with an upper case letter.  No spaces.

An important note:  A program can only have 1 public static void MAIN method, so do NOT check the box when making this class.

An object has 3 parts

1) Variables/fields - Object's properties
2) Constructor - Object's setup
3) Methods - Object's actions

#1
Variables/fields are put at the top.  What are some properties for a bank account

A few I can think of

int accountNumber
double balance
String ownerName

Add "private" at the beginning of each variable. This makes so these variables can only be used in this object.  I'll talk more about this in a future video.


THE NEXT TWO ITEMS, the Constructor and Methods might be a little difficult to understand, however, I will explain them briefly now and again in future videos. 

https://www.javatpoint.com/instantiation-in-java
#2 Constructor

Start with the keyword PUBLIC so it can be used from outside the class.

	public BankAccount(int accountNumber, String ownerName) {
		this.accountNumber = accountNumber;
		this.ownerName = ownerName;
		this.balance = 0;
	}




#3
Methods

What are the actions that you want the bank account to be able to do?

In other programming languages, these are called FUNCTIONS.  In Java, they are called METHODS.

public double addToBalance(double amount) {
	this.balance = this.balance + amount;
	return this.balance;
}

This METHOD takes in an amount, which is called an INPUT parameter.
It adds the amount to the class balance variable and then stores the result back to balance, so balance now is
The METHOD then returns the balance....thats what this double means after PUBLIC.  Its the data type that is being returned.

I'll also add a few getter methods, such as

public int getAccountNumber() {
	return this.accountNumber;
}

public String getOwnerName() {
	return this.ownerName;
}

You can make as many methods as you want, but I'll start with just this one so I can show how this all works.

So now in my MAIN method in my Program11 class, I can do

BankAccount account1 = new BankAccount(1, "Bob Brown");

and then I can create a second bank account

BankAccount account2 = new BankAccount(2, "Jeff Jones");

So notice, the class is like a blueprint.  I can create multiple different BankAccount objects with the class, just like I can create a bunch of houses with the same blueprint.

The process of creating a new object is called Instantiation.  Type "new" and then the class name (which is BankAccount in this case) and pass values to the constructor.

The BankAccount class constructor has 2 input parameters.  The first is an int (account number) and the second is a String (OwnerName)

Now I can use these variables to execute the methods

For account1, I can do

System.out.println(account1.getAccountNumber());
System.out.println(account1.getOwnerName());
account1.addToBalance(100);

and I can execute these methods again and this time decide to print the balance that is returned

System.out.println(account1.addToBalance(50));

When I look at account2, 
 
System.out.println(account2.getAccountNumber());
System.out.println(account2.getOwnerName());
System.out.println(account2.addToBalance(1));

Its the same functionality...both are following the same BankAccount class design, but two separate objects with different values.

I understand I went over everything quite fast, but I will be talking alot more about objects in future videos, so don't worry if not everything made sense.

Let's take a look at the instructions for Program 11, which will let you try using objects!

(Read Program Title)

(Read Program Objective)


program 11 


/programs/11 .
